name: my-tg

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper
      - zookeeper_log:/var/log/zookeeper
    ports:
      - "2181:2181"
    networks:
      - web

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - web

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    restart: always
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      - web

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "4200:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka:29092"
      KAFKA_CLUSTERS_0_SCHEMA_REGISTRY: "http://schema-registry:8081"
    networks:
      - web

  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.messages.address=:50051" # messages:8001
    ports:
      - "80:80"
      - "8080:8080" # Dashboard
      - "50051:50051" # messages
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      # - "./traefik/dynamic.yml:/etc/traefik/dynamic.yml"
    networks:
      - web

  # # # # # # # # # # # # 
  # # # My services # # #
  # # # # # # # # # # # # 
  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    container_name: websocket
    volumes:
      - ./websocket:/app # for air
    environment:
      - GIN_MODE=release
      - PORT=8000
    ports:
      - 8000:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=PathPrefix(`/api/v1/ws`)"
      - "traefik.http.routers.websocket.entrypoints=web"
      - "traefik.http.routers.websocket.middlewares=websocket-headers"
      - "traefik.http.services.websocket.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.websocket-headers.headers.customRequestHeaders.Connection=Upgrade"
      - "traefik.http.middlewares.websocket-headers.headers.customRequestHeaders.Upgrade=websocket"
    networks:
      - web

  messages:
    build:
      context: ./messages
      dockerfile: Dockerfile
    container_name: messages
    volumes:
      - ./messages:/app # for air
    environment:
      - GIN_MODE=release
      - PORT=8001
    ports:
      - 8001:8001
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.messages.rule=PathPrefix(`/api/v1/messages`)"
      - "traefik.tcp.routers.messages.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.messages.entrypoints=messages" # <-- gRPC goes throw 50051
      - "traefik.tcp.services.messages.loadbalancer.server.port=8001" # inner port
    networks:
      - web

networks:
  web:
    driver: bridge

volumes:
  zookeeper_data:
  zookeeper_log: